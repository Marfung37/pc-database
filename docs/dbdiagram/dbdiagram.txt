enum kicktable {
  srs
  srs_plus
  srsx
  srs180 // jstris
  tetrax
  asc
  ars
  none // no kick table
}

enum hold_type {
  any    // swap with any
  cyclic // swap in cycle and stop after going through all once
  none
}

table schema_metadata {
  version           text          [primary key]
  description       text          [not null]
  updated_at        timestamptz   [default: `now()`]
}

table setups {
  setup_id          setupid       [primary key, note: '12 hexdigits']
  pc                smallint      [not null, note: 'PC Number for 1-9']
  leftover          varchar(7)    [not null, note: 'Pieces left from bag. Only TILJSZO allowed']
  build             varchar(10)   [not null, note: 'Pieces used in setup. Only TILJSZO allowed']
  cover_pattern     varchar(255)  [not null, note: 'Extended pieces notation for when setup is covered. Need not be perfect']
  oqb_path          ltree         [note: 'Materialized path of ids to this setup. NULL if not oqb and set to setup_id if oqb initially and populated from setup_oqb_links']
  oqb_depth         smallint      [note: 'Setup oqb tree depth']
  oqb_description   varchar(255)  [note: 'Description for when to use this setup']
  fumen             text          [not null, note: 'Fumen of the setup']
  solve_pattern     varchar(100)  [note: 'Extended pieces notation used for solving. NULL if internal node in oqb']
  mirror            setupid       [note: 'References a setup_id for mirror setup']
  see               smallint      [not null, default: 7, note: 'Number of pieces that can be seen']
  hold              smallint      [not null, default: 1, note: 'Number of pieces that can be held']
  credit            varchar(255)  [note: 'Credit for founder of setup']
}

table setup_oqb_links {
  child_id          setupid   [primary key]
  parent_id         setupid   [not null]
}

table setup_variants {
  variant_number    int           [not null, note: 'Variant number 1 indexed. Variant 0 is the entry in setups']
  setup_id          setupid       [not null, note: '12 hexdigits']
  build             varchar(10)   [not null, note: 'Pieces used in setup. Only TILJSZO allowed']
  fumen             text          [not null, note: 'Fumen of the setup']
  solve_pattern     varchar(100)  [note: 'Extended pieces notation used for solving. NULL if internal node in oqb']

  Note: 'Setups where other pieces can be placed without affecting statistics'
}

table statistics {
  stat_id           uuid          [primary key, default: `gen_random_uuid()`]
  setup_id          setupid       [not null, note: '12 hexdigits']
  kicktable         kicktable     [not null]
  hold_type         hold_type     [not null, default: 'any', note: 'Structure how hold works']
  cover_data        bytea         [note: 'Bit string of what queues are covered from cover dependence. NULL if all covered']
  solve_percent     decimal(5, 2) [note: 'Solve percent. NULL if internal node in oqb']
  solve_fraction    fraction      [note: 'Precise solve fraction. NULL if internal node in oqb']
  all_solves        text          [note: 'All solves for the setup']
  minimal_solves    text          [note: 'Minimal set of solves. NULL if not created']
  path_file         bool          [note: 'Whether path file exist. Follows [setup-id]-[kicktable].csvd.xz format']

  indexes {
    (setup_id, kicktable) [unique]
  }
}

table save_data {
  save_data_id      uuid          [primary key, default: `gen_random_uuid()`]
  save_id           uuid          [not null]
  stat_id           uuid          [not null]
  save_percent      decimal(5, 2) [note: 'Save percent. NULL if multiple saves']
  save_fraction     fraction      [note: 'Precise save fraction. NULL if multiple saves']
  priority_save_percent   decimal(5, 2) [note: 'Array of percents for giving priority for saves. NULL if one save']
  priority_save_fraction  fraction      [note: 'Array of fraction for giving priority for saves. NULL if one save']
  all_solves        text          [note: 'All solves for save']
  minimal_solves    text          [note: 'Minimal set of solves for save']
}

table saves {
  save_id           uuid          [primary key, default: `gen_random_uuid()`]
  save              varchar(255)  [not null, note: 'Pieces saved for next PC for sfinder-saves']
  description       varchar(255)  [note: 'Description of the save. Ex: One T or Two LJ']
  pc                smallint      [not null, note: 'PC Number for 1-9']
  auto_populate     bool          [not null, default: false, note: 'Whether to automatically populate for all setups with this pc']
  gen_minimal       bool          [not null, default: false, note: 'When automatically populating, populate the minimal solves']
  gen_all_solves    bool          [not null, default: false, note: 'When automatically populating, populate all solves']
}

table users {
  user_id          uuid         [primary key, default: `gen_random_uuid()`]
  auth_id          uuid         [unique]
  username         varchar(255) [unique, not null] // maybe should have credit reference this
  email            varchar(255) [unique, not null]
  editor           bool         [not null, default: false]
  admin            bool         [not null, default: false]
  active           bool         [not null, default: false]

  indexes {
    auth_id [name: "user_auth_id_idex", unique]
  }
}

table auth.users {
  id                uuid [primary key, ref: - users.auth_id]
  email             text [not null, unique]
}

Ref: statistics.setup_id > setups.setup_id        [delete: cascade, update: cascade]
Ref: save_data.stat_id > statistics.stat_id       [delete: cascade, update: cascade]
Ref: saves.save_id > save_data.save_id            [delete: cascade, update: cascade]

Ref: setup_variants.setup_id > setups.setup_id    [delete: cascade, update: cascade]
Ref: setup_oqb_links.child_id > setups.setup_id   [delete: cascade, update: cascade]
Ref: setup_oqb_links.parent_id > setups.setup_id  [delete: cascade, update: cascade]
Ref: setups.mirror - setups.setup_id              [delete: set null, update: cascade]
