## このファイルについて

ここでは、プログラムをさらに効果的に使うための詳しい説明を記載しています。

シンプルにプログラムを利用だけであれば "1.README.txt" の内容で十分となっております。
もし、まだそちらをお読みでない場合は、この先を読む前に一度ご確認ください。



## 実行中のログ表示の見方について

実行ログの説明は以下の通りです。

---
1000  < 処理回数(世代数)
average = 95.37056504599211  < すべての解の良さを数値化したもの
best = 69 solutions          < 現在の解。"x solutions"は「x個の解で必要なツモをすべてカバーできている状態」
worst = 159 solutions        < 全体で最も悪い解
---



## コマンドを止めるタイミングについて

確実に更新を打ち切れるタイミングはわからないので、以下の傾向や待ち時間も考慮して、止めるタイミングを決めてください。

【傾向】
average の値が変化しなくなったら、bestが更新されにくい状態である判断できます。
この場合は、プログラムを止めても大丈夫だと思われます。

average の値が軽く上下しながらも、少しずつ小さくなっている間は、まだ探索できていると考えられます。
この場合は、できれば待ったほうがベターだと思われます。



## パラメータについて

ここでは、path-filterを実行するコマンドの数値について、
各数値の説明やどのような値を設定すると良いかを記載しています。

基本的には↓のコマンド例の数値で十分だと思います。
結果に納得がいかないなどの理由で、どうしても調整したい場合は、ここの説明を参考にしてください。


<コマンド例>
	java -jar path-filter.jar 5.0 1.0 3.0 300000


【第1引数】5.0

集団サイズです。実際の値は `入力値 * 次元数` となります。

基本的には大きい値のほうがより安定して良いと思われますが、
数値を大きくするほど、解をみつけるのに時間がかかるようになります。
値を大きくするデメリットは、実行時間以外は基本的にないので、待てる範囲で大きくすると良いです。


【第2引数】1.0

1世代あたりで計算する回数（個体数）です。実際の値は `入力値 * 次元数` となります。

基本的には大きい値のほうがより安定して良いと思われますが、
数値を大きくするほど、解をみつけるのに時間がかかるようになります。
値を大きくするデメリットは、実行時間以外は基本的にないので、待てる範囲で大きくすると良いです。

基本的には、第1引数・第2引数とペアで数値を上げると良い気がします。
もちろん、第2引数だけを、第1引数程度まで上げても効果はあると思われます。
一番影響を受けるのは実行時間なので、実際に確認しつつ、調整してください。


【第3引数】3.0

突然変異率です。実際の値は `入力値 / 次元数` となります。

この値については、どの程度がべストかほぼわかりません。
1.0が無難ですが、ベストな値は問題によって変わります。
余裕があれば、色々な数値に変えてみるとベターです。

基本的な挙動は、次のようになるはずです。

値が小さい → 探索は安定する分無難だけど最適値ではない解になりやすい
値が大きい → 探索が安定しなくなり、bestが良い方向に進まなくなる


【第4引数】300000
最大世代数です。

最大処理回数の指定です。
もしプログラムが自動で止まるようにしたい場合のみ、調整してください。
手動で止める場合は、特に変更する必要はありません。



## 内部で使われている探索手法について

遺伝的アルゴリズムと呼ばれる探索手法となっています。
前述のパラメータは、この遺伝的アルゴリズムのパラメータなので、
このアルゴリズムについて調べるとさらなる理解ができると思われます。

さらに細かく説明すると、遺伝的アルゴリズムの中でも MGG + 二点交叉 の組み合わせになっております。
